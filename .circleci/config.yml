version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4
  kubernetes: circleci/kubernetes@1.3.1
  aws-eks: circleci/aws-eks@2.2.0  
commands:

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  

  destroy-environment:
    description: Destroy kubernetes cluster.
    steps:
      - run:
          name: Destroy EKS cluster
          when: on_fail
          command: |
            eksctl delete cluster -f kubernetes_deploy.yml
            
jobs:
  make-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/app
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}      
  
  builddockerimage-uploaddockerimage:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and upload docker image to docker hub container
          command: |
            image="udacitycapstone"
            dockerpath=sreenivasaparasa/udacitycapstone
            docker build --tag=$image .
            docker image ls
            
           
            docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
            docker tag "$image" "${dockerpath}:${CIRCLE_WORKFLOW_ID:0:7}"
            docker tag "$image" "${dockerpath}:latest"
            docker push "${dockerpath}:${CIRCLE_WORKFLOW_ID:0:7}"
            
            docker push "${dockerpath}:latest"
            
  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependancies
          command: |
            yum install -y tar gzip
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            
      - run:
          name: create new cluster
          command: |            
            kubeRegion="us-east-1"
            image="udacitycapstone"
            dockerpath=sreenivasaparasa/udacitycapstone
            
            if eksctl create cluster --config-file=kubernetes_deploy.yml
            then
              echo "creating new stack"
              aws eks update-kubeconfig --name $image --region $kubeRegion              
              kubectl apply -f kubernetes_deploy.yml

              kubectl get deployments
              kubectl get services
            else
              aws eks update-kubeconfig --name $image --region $kubeRegion
              echo "update existing stack"
              kubectl get deployments
              kubectl get services
              kubectl get deploy,rs,svc,pods
              kubectl set image deployment/$image capstone-app="$dockerpath:${CIRCLE_WORKFLOW_ID:0:7}"
              kubectl get deployments
              kubectl get rs
            fi
      
  
workflows:
  default:
    jobs:
      - make-lint
      - builddockerimage-uploaddockerimage:
          requires: [make-lint]
      - deploy:
          requires: [builddockerimage-uploaddockerimage]